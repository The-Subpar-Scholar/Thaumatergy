//generated by James's shit Python script
#pragma once
#include <cstdint>
struct EquipParamWeapon {
    static const wchar_t* name;
    struct data {                                                   
        int behaviorVariationId;                              
        int sortId;                                           
        int wanderingEquipId;                                 
        float weight;                                           
        float weaponWeightRate;                                 
        int fixPrice;                                         
        int basicPrice;                                       
        int sellValue;                                        
        float correctStrength;                                  
        float correctAgility;                                   
        float correctMagic;                                     
        float correctFaith;                                     
        float physGuardCutRate;                                 
        float magGuardCutRate;                                  
        float fireGuardCutRate;                                 
        float thunGuardCutRate;                                 
        int spEffectBehaviorId;                               
        int spEffectBehaviorId1;                              
        int spEffectBehaviorId2;                              
        int residentSpEffectId;                               
        int residentSpEffectId1;                              
        int residentSpEffectId2;                              
        int materialSetId;                                    
        int originEquipWep;                                   
        int originEquipWep1;                                  
        int originEquipWep2;                                  
        int originEquipWep3;                                  
        int originEquipWep4;                                  
        int originEquipWep5;                                  
        int originEquipWep6;                                  
        int originEquipWep7;                                  
        int originEquipWep8;                                  
        int originEquipWep9;                                  
        int originEquipWep10;                                 
        int originEquipWep11;                                 
        int originEquipWep12;                                 
        int originEquipWep13;                                 
        int originEquipWep14;                                 
        int originEquipWep15;                                 
        float antiDemonDamageRate;                              
        float antUndeadDamageRate;                              
        float antHollowDamageRate;                              
        float antAbyssalDamageRate;                             
        int vagrantItemLotId;                                 
        int vagrantBonusEneDropItemLotId;                     
        int vagrantItemEneDropItemLotId;                      
        short equipModelId;                                     
        short iconId;                                           
        short durability;                                       
        short durabilityMax;                                    
        short attackThrowEscape;                                
        short parryDamageLife;                                  
        short attackBasePhysics;                                
        short attackBaseMagic;                                  
        short attackBaseFire;                                   
        short attackBaseThunder;                                
        short attackBaseStamina;                                
        short saWeaponDamage;                                   
        short saDurability;                                     
        short guardAngle;                                       
        short staminaGuardDef;                                  
        short reinforceTypeId;                                  
        short trophySGradeId;                                   
        short trophySeqId;                                      
        short throwAtkRate;                                     
        short bowDistRate;                                      
        int8_t equipModelCategory;                               
        int8_t equipModelGender;                                 
        int8_t weaponCategory;                                   
        int8_t wepmotionCategory;                                
        int8_t guardmotionCategory;                              
        int8_t atkMaterial;                                      
        int8_t defMaterial;                                      
        int8_t defSfxMaterial;                                   
        int8_t correctType;                                      
        int8_t spAttribute;                                      
        short spAtkcategory;                                    
        int8_t wepmotionOneHandId;                               
    private:
        int8_t _0xED;
public:
        int8_t wepmotionBothHandId;                              
    private:
    public:
        int8_t properStrength;                                   
        int8_t properAgility;                                    
        int8_t properMagic;                                      
        int8_t properFaith;                                      
        int8_t overStrength;                                     
        int8_t attackBaseParry;                                  
        int8_t defenseBaseParry;                                 
        int8_t guardBaseRepel;                                   
        int8_t attackBaseRepel;                                  
        int8_t guardCutCancelRate;                               
        int8_t guardLevel;                                       
        int8_t slashGuardCutRate;                                
        int8_t blowGuardCutRate;                                 
        int8_t thrustGuardCutRate;                               
        int8_t poisonGuardResist;                                
        int8_t diseaseGuardResist;                               
        int8_t bloodGuardResist;                                 
        int8_t curseGuardResist;                                 
        int8_t isDurabilityDivergence;                           
        bool rightHandEquipable : 1;                           // bit offset +0
        bool leftHandEquipable : 1;                            // bit offset +1
        bool bothHandEquipable : 1;                            // bit offset +2
        bool arrowSlotEquipable : 1;                           // bit offset +3
        bool boltSlotEquipable : 1;                            // bit offset +4
        bool enableGuard : 1;                                  // bit offset +5
        bool enableParry : 1;                                  // bit offset +6
        bool enableMagic : 1;                                  // bit offset +7
        bool :0;
        bool enablePyromancy : 1;                              // bit offset +0
        bool enableMiracle : 1;                                // bit offset +1
        bool enableVowMagic : 1;                               // bit offset +2
        bool isNormalAttackType : 1;                           // bit offset +3
        bool isBlowAttackType : 1;                             // bit offset +4
        bool isSlashAttackType : 1;                            // bit offset +5
        bool isThrustAttackType : 1;                           // bit offset +6
        bool isEnhance : 1;                                    // bit offset +7
        bool :0;
        bool isLuckCorrect : 1;                                // bit offset +0
        bool isCustom : 1;                                     // bit offset +1
        bool disableBaseChangeReset : 1;                       // bit offset +2
        bool disableRepair : 1;                                // bit offset +3
        bool isDarkHand : 1;                                   // bit offset +4
        bool simpleModelForDlc : 1;                            // bit offset +5
        bool ubytelanternWep : 1;                              // bit offset +6
        bool isVersusGhostWep : 1;                             // bit offset +7
        bool :0;
        bool baseChangeCategory : 1;                           // bit offset +0
        bool baseChangeCategory1 : 1;                          // bit offset +1
        bool baseChangeCategory2 : 1;                          // bit offset +2
        bool baseChangeCategory3 : 1;                          // bit offset +3
        bool baseChangeCategory4 : 1;                          // bit offset +4
        bool baseChangeCategory5 : 1;                          // bit offset +5
        bool isDragonSlayer : 1;                               // bit offset +6
        bool isDeposit : 1;                                    // bit offset +7
        bool :0;
        bool disableMultiDropShare : 1;                        // bit offset +0
        bool isDiscard : 1;                                    // bit offset +1
        bool isDrop : 1;                                       // bit offset +2
        int8_t defMaterial2;                                     
    private:
        int8_t _0x107;
        int8_t _0x108;
        int8_t _0x109;
        int8_t _0x10A;
        int8_t _0x10B;
    public:
        int Group0_AtkVfxId;                                  
        int Group0_DummyPolyId0;                              
        int Group0_DummyPolyId1;                              
    private:
        int8_t _0x118;
        int8_t _0x119;
        int8_t _0x11A;
        int8_t _0x11B;
        int8_t _0x11C;
        int8_t _0x11D;
        int8_t _0x11E;
        int8_t _0x11F;
        int8_t _0x120;
        int8_t _0x121;
        int8_t _0x122;
        int8_t _0x123;
        int8_t _0x124;
        int8_t _0x125;
        int8_t _0x126;
        int8_t _0x127;
        int8_t _0x128;
        int8_t _0x129;
        int8_t _0x12A;
        int8_t _0x12B;
        int8_t _0x12C;
        int8_t _0x12D;
        int8_t _0x12E;
        int8_t _0x12F;
        int8_t _0x130;
        int8_t _0x131;
        int8_t _0x132;
        int8_t _0x133;
        int8_t _0x134;
        int8_t _0x135;
        int8_t _0x136;
        int8_t _0x137;
        int8_t _0x138;
        int8_t _0x139;
        int8_t _0x13A;
        int8_t _0x13B;
        int8_t _0x13C;
        int8_t _0x13D;
        int8_t _0x13E;
        int8_t _0x13F;
        int8_t _0x140;
        int8_t _0x141;
        int8_t _0x142;
        int8_t _0x143;
        int8_t _0x144;
        int8_t _0x145;
        int8_t _0x146;
        int8_t _0x147;
        int8_t _0x148;
        int8_t _0x149;
        int8_t _0x14A;
        int8_t _0x14B;
        int8_t _0x14C;
        int8_t _0x14D;
        int8_t _0x14E;
        int8_t _0x14F;
        int8_t _0x150;
        int8_t _0x151;
        int8_t _0x152;
        int8_t _0x153;
        int8_t _0x154;
        int8_t _0x155;
        int8_t _0x156;
        int8_t _0x157;
        int8_t _0x158;
        int8_t _0x159;
        int8_t _0x15A;
        int8_t _0x15B;
        int8_t _0x15C;
        int8_t _0x15D;
        int8_t _0x15E;
        int8_t _0x15F;
        int8_t _0x160;
        int8_t _0x161;
        int8_t _0x162;
        int8_t _0x163;
        int8_t _0x164;
        int8_t _0x165;
        int8_t _0x166;
        int8_t _0x167;
        int8_t _0x168;
        int8_t _0x169;
        int8_t _0x16A;
        int8_t _0x16B;
    public:
        short materialVal0;                                     
        short materialVal1;                                     
        int weaponPosition;                                   
        float wepAbsorbPosId;                                   
    private:
        bool memBuffer1 : 2;
public:
        bool isAutoEquip : 1;                                  // bit offset +2
        int8_t correctTypeMagic;                                 
        int8_t correctTypeFire;                                  
        int8_t correctTypeThunder;                               
    private:
        int8_t _0x17C;
        int8_t _0x17D;
        int8_t _0x17E;
        int8_t _0x17F;
        int8_t _0x180;
        int8_t _0x181;
        int8_t _0x182;
        int8_t _0x183;
    public:
        float darkGuardCutRate;                                 
        short attackBaseDark;                                   
        int8_t correctTypeDark;                                  
        int8_t AtkThrowEscapeA;                                  
        int8_t swordArt_ActId;                                   
    private:
        int8_t _0x18D;
        int8_t _0x18E;
        int8_t _0x18F;
    public:
        int8_t AtkThrowEscapeB;                                  
    private:
        int8_t _0x191;
public:
        int8_t frostGuardResist;                                 
    private:
        int8_t _0x193;
public:
        int swordArtId;                                       
        float correctLuck;                                      
        int reinforceWeaponId;                                
    private:
        short _0x19E;
public:
        short displayTypeId;                                    
    private:
        int8_t _0x1A4;
        int8_t _0x1A5;
        int8_t _0x1A6;
        int8_t _0x1A7;
        int8_t _0x1A8;
        int8_t _0x1A9;
        int8_t _0x1AA;
        int8_t _0x1AB;
        int8_t _0x1AC;
        int8_t _0x1AD;
        int8_t _0x1AE;
        int8_t _0x1AF;
        int8_t _0x1B0;
        int8_t _0x1B1;
        int8_t _0x1B2;
        int8_t _0x1B3;
        int8_t _0x1B4;
        int8_t _0x1B5;
        int8_t _0x1B6;
        int8_t _0x1B7;
        int8_t _0x1B8;
        int8_t _0x1B9;
        int8_t _0x1BA;
        int8_t _0x1BB;
        int8_t _0x1BC;
        int8_t _0x1BD;
        int8_t _0x1BE;
        int8_t _0x1BF;
        int8_t _0x1C0;
        int8_t _0x1C1;
        int8_t _0x1C2;
        int8_t _0x1C3;
        int8_t _0x1C4;
        int8_t _0x1C5;
        int8_t _0x1C6;
        int8_t _0x1C7;
        int8_t _0x1C8;
        int8_t _0x1C9;
        int8_t _0x1CA;
        int8_t _0x1CB;
        int8_t _0x1CC;
        int8_t _0x1CD;
        int8_t _0x1CE;
        int8_t _0x1CF;
    public:
        int sfxId0;                                           
        int sfxId1;                                           
        int sfxId2;                                           
        int sfxId3;                                           
        int sfxPos0;                                          
        int sfxPos1;                                          
        int sfxPos2;                                          
        int sfxPos3;                                          
        float staminaConsumeRate;                               
    private:
        int8_t _0x1F4;
        int8_t _0x1F5;
        int8_t _0x1F6;
        int8_t _0x1F7;
        int8_t _0x1F8;
        int8_t _0x1F9;
        int8_t _0x1FA;
        int8_t _0x1FB;
        int8_t _0x1FC;
        int8_t _0x1FD;
        int8_t _0x1FE;
        int8_t _0x1FF;
        int8_t _0x200;
        int8_t _0x201;
        int8_t _0x202;
        int8_t _0x203;
        int8_t _0x204;
        int8_t _0x205;
        int8_t _0x206;
        int8_t _0x207;
        int8_t _0x208;
        int8_t _0x209;
        int8_t _0x20A;
        int8_t _0x20B;
        int8_t _0x20C;
        int8_t _0x20D;
        int8_t _0x20E;
        int8_t _0x20F;
        int8_t _0x210;
        int8_t _0x211;
        int8_t _0x212;
        int8_t _0x213;
        int8_t _0x214;
        int8_t _0x215;
        int8_t _0x216;
        int8_t _0x217;
        int8_t _0x218;
        int8_t _0x219;
        int8_t _0x21A;
        int8_t _0x21B;
        int8_t _0x21C;
        int8_t _0x21D;
        int8_t _0x21E;
        int8_t _0x21F;
        int8_t _0x220;
        int8_t _0x221;
        int8_t _0x222;
        int8_t _0x223;
        int8_t _0x224;
        int8_t _0x225;
        int8_t _0x226;
        int8_t _0x227;
    public:
        int attackElementCorrectId;                           
        int shopPrice;                                        
    private:
        int8_t _0x22D;
public:
        int8_t StackSize;                                        
    };
};